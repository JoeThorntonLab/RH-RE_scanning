calculate_SSE_for_matrices <- function(matA, matB){
#element-wise SE --> SSE
SSE <- sum((matA - matB)^2)
return(SSE)
}
packages <- c("tidyr", "MASS", "ggplot2", "Matrix", "stringr", "tibble",
"dplyr", "patchwork", "foreach", "doParallel", "matrixStats",
"Biostrings", "readr","furrr","purrr","igraph","recommenderlab","Matrix","ggradar","pheatmap")
installed_packages <- packages %in% rownames(installed.packages())
if(installed_packages[which(packages=="Biostrings")] == F){
BiocManager::install("Biostrings")
}
if(installed_packages[which(packages=="ggradar")] == F){
devtools::install_github("ricardo-bion/ggradar", dependencies = TRUE)
}
if(any(installed_packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))] == F)) {
to_install <- !installed_packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))]
pack <- packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))]
install.packages(pack[to_install])
}
# load packages
invisible(lapply(packages, library, character.only=TRUE))
load("./matrix_comparison.RData") # loading the matrices
source("../MC_MutSel_functions.R") # loading functions
AncSR1_ERE_ref <- meanF_data %>% filter(AA_var == "EGKA" & REBC == "AncSR1_REBC3") %>% pull(avg_meanF)
AncSR2_SRE_ref <- meanF_data %>% filter(AA_var == "GSKV" & REBC == "AncSR2_REBC1") %>% pull(avg_meanF)
PATH_LENGTH = 3 # path length (neighborhood size) to find mutational trajectoties
N_CORES=detectCores()-1 # number of cores for parallel processing
REF_GENOTYPE = "EGKA" # r
inner_product_matrix_cor <- function(matA,matB){
# Calculate the inner product using the trace of the product of A and the transpose of B (tr(A.B^T))
inner_product <- sum(diag(matA %*% t(matB)))
# Calculate the norms of the matrices
normA <- sqrt(sum(matA^2))
normB <- sqrt(sum(matB^2))
# Calculate the correlation using the inner product and matrix norms
cor <- inner_product / (normA * normB)
return(cor)
}
calculate_SSE_for_matrices <- function(matA, matB){
#element-wise SE --> SSE
SSE <- sum((matA - matB)^2)
return(SSE)
}
SSE_for_matrices <- function(matA, matB){
#element-wise SE --> SSE
SSE <- sum((matA - matB)^2)
return(SSE)
}
# Similarity (SSE)
print(paste("SSE between matrix A and B for AncSR1 bg:",SSE_for_matrices(M_drift_sr1_A,M_drift_sr1_B)))
print(paste("SSE between matrix B and C for AncSR1 bg:",SSE_for_matrices(M_drift_sr1_B,M_drift_sr1_C)))
print(paste("SSE between matrix A and B for AncSR2 bg:",SSE_for_matrices(M_drift_sr2_A,M_drift_sr2_B)))
print(paste("SSE between matrix B and C for AncSR2 bg:",SSE_for_matrices(M_drift_sr2_B,M_drift_sr2_C)))
print(paste("SSE between stat. dists. between A and B for AncSR1 bg:",sum((typeA_sr1_statdist-typeB_sr1_statdist)^2)))
typeA_sr1 <- extract_main_ntwrk(net_sr1,M_drift_sr1_A) # create square matrix. Main component of genotype network
typeA_sr1_statdist <- stationary_dist(typeA_sr1) # compute stationary distribution of genotypes in the main network component
typeB_sr1 <- extract_main_ntwrk(net_sr1,M_drift_sr1_B)
typeB_sr1_statdist <- stationary_dist(typeB_sr1)
typeC_sr1 <- extract_main_ntwrk(net_sr1,M_drift_sr1_C)
typeC_sr1_statdist <- stationary_dist(typeC_sr1)
# AncSR2
typeA_sr2 <- extract_main_ntwrk(net_sr2,M_drift_sr2_A)
typeA_sr2_statdist <- stationary_dist(typeA_sr2)
typeB_sr2 <- extract_main_ntwrk(net_sr2,M_drift_sr2_B)
typeB_sr2_statdist <- stationary_dist(typeB_sr2)
typeC_sr2 <- extract_main_ntwrk(net_sr2,M_drift_sr2_C)
typeC_sr2_statdist <- stationary_dist(typeC_sr2)
print(paste("SSE between stat. dists. between A and B for AncSR1 bg:",sum((typeA_sr1_statdist-typeB_sr1_statdist)^2)))
print(paste("SSE between stat. dists. between B and C for AncSR1 bg:",sum((typeB_sr1_statdist-typeC_sr1_statdist)^2)))
print(paste("SSE between matrix A and B for AncSR2 bg:",SSE_for_matrices(M_drift_sr2_A,M_drift_sr2_B)))
print(paste("SSE between matrix B and C for AncSR2 bg:",SSE_for_matrices(M_drift_sr2_B,M_drift_sr2_C)))
print(paste("SSE between stat. dists. between A and B for AncSR2 bg:",sum((typeA_sr2_statdist-typeB_sr2_statdist)^2)))
print(paste("SSE between stat. dists. between B and C for AncSR2 bg:",sum((typeB_sr2_statdist-typeC_sr2_statdist)^2)))
print(paste("Correlation between stat. dists. between B and C for AncSR1 bg:",cor(typeB_sr1_statdist,typeC_sr1_statdist)))
print(paste("Correlation between stat. dists. between B and C for AncSR2 bg:",cor(typeB_sr2_statdist,typeC_sr2_statdist)))
############################
# STATIONARY PDFV
# AncSR1
typeB_sr1_pdfv <- get_PDFV_v2(typeB_sr1_statdist,Bg = "AncSR1",model = "Stationary PDFV (B)",type="simulated mc")
typeC_sr1_pdfv <- get_PDFV_v2(typeC_sr1_statdist,Bg = "AncSR1",model = "Stationary PDFV (C)",type="simulated mc")
print(paste("Correlation of the prob. of phenotypic outcomes at equilibrium for AncSR1 bg:",
inner_join(typeB_sr1_pdfv,typeC_sr1_pdfv,by="RE") %>% with(cor(Norm_F_prob.x,Norm_F_prob.y)))) # correlation
print(paste("SSE of the prob. of phenotypic outcomes at equilibrium for AncSR1 bg:",
inner_join(typeB_sr1_pdfv,typeC_sr1_pdfv,by="RE") %>% with(sum((Norm_F_prob.x-Norm_F_prob.y)^2)))) # SSE
print(paste("Correlation of the prob. of phenotypic outcomes at equilibrium for AncSR2 bg:",
inner_join(typeB_sr2_pdfv,typeC_sr2_pdfv,by="RE") %>% with(cor(Norm_F_prob.x,Norm_F_prob.y)))) # correlation
# AncSR2
typeB_sr2_pdfv <- get_PDFV_v2(typeB_sr2_statdist,Bg = "AncSR2",model = "Stationary PDFV (B)",type="simulated mc")
typeC_sr2_pdfv <- get_PDFV_v2(typeC_sr2_statdist,Bg = "AncSR2",model = "Stationary PDFV (C)",type="simulated mc")
print(paste("Correlation of the prob. of phenotypic outcomes at equilibrium for AncSR2 bg:",
inner_join(typeB_sr2_pdfv,typeC_sr2_pdfv,by="RE") %>% with(cor(Norm_F_prob.x,Norm_F_prob.y)))) # correlation
print(paste("SSE of the prob. of phenotypic outcomes at equilibrium for AncSR2 bg:",
inner_join(typeB_sr2_pdfv,typeC_sr2_pdfv,by="RE") %>% with(sum((Norm_F_prob.x-Norm_F_prob.y)^2)))) # SSE
pheno_transition_sr1_spec_B <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=typeB_sr1,bg = "AncSR1",n_steps = PATH_LENGTH,specific = T)
pheno_transition_sr1_spec_C <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=typeC_sr1,bg = "AncSR1",n_steps = PATH_LENGTH,specific = T)
pheno_transition_sr2_spec_B <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=typeB_sr2,bg = "AncSR2",n_steps = PATH_LENGTH,specific = T)
pheno_transition_sr2_spec_C <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=typeC_sr2,bg = "AncSR2",n_steps = PATH_LENGTH,specific = T)
# scaled probabilities
pheno_transition_sr1_spec_scaled_B <- t(apply(pheno_transition_sr1_spec_B,1,scale)); colnames(pheno_transition_sr1_spec_scaled_B) <- REs[[1]]
pheno_transition_sr1_spec_scaled_C <- t(apply(pheno_transition_sr1_spec_C,1,scale)); colnames(pheno_transition_sr1_spec_scaled_C) <- REs[[1]]
pheno_transition_sr2_spec_scaled_B <- t(apply(pheno_transition_sr2_spec_B,1,scale)); colnames(pheno_transition_sr2_spec_scaled_B) <- REs[[1]]
pheno_transition_sr2_spec_scaled_C <- t(apply(pheno_transition_sr2_spec_C,1,scale)); colnames(pheno_transition_sr2_spec_scaled_C) <- REs[[1]]
# matrix correlations
print(paste("Correlation for phenotypic transitions between B and C for AncSR1 bg:",
inner_product_matrix_cor(na.omit(pheno_transition_sr1_spec_scaled_B),na.omit(pheno_transition_sr1_spec_scaled_C))))
print(paste("Correlation for phenotypic transitions between B and C for AncSR2 bg:",
inner_product_matrix_cor(na.omit(pheno_transition_sr2_spec_scaled_B),na.omit(pheno_transition_sr2_spec_scaled_C))))
print(paste("SSE for phenotypic transitions between B and C for AncSR1 bg:",
SSE_for_matrices(na.omit(pheno_transition_sr1_spec_scaled_B),na.omit(pheno_transition_sr1_spec_scaled_C))))
print(paste("SSE for phenotypic transitions between B and C for AncSR2 bg:",
SSE_for_matrices(na.omit(pheno_transition_sr2_spec_scaled_B),na.omit(pheno_transition_sr2_spec_scaled_C))))
getwd()
