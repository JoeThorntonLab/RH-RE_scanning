phenotypes_tbl %>% filter(AA_var=="GGKA" & bg=="AncSR2")
phenotypes_tbl %>% filter(AA_var=="GGKV" & bg=="AncSR2")
phenotypes_tbl %>% filter(AA_var=="GGKV" & bg=="AncSR2") %>% unnest(bound_REs)
getd()
getwd()
setwd("/Users/santiagoherrera/Desktop/UChicago/Thornton_LAB/RH-RE_project/Data_all_RH-RE/GitHub_repo/RH-RE_scanning/notebooks/evolutionary_simulations")
# Check whether the matrices have been created already
if(!file.exists(file.path(".", "MutSel_matrices_complete_data_complexes.RData"))) {
# Load complete data from mutation effects model
# Complete data: measured + predicted meanF (`mutation_effects_model` folder)
data_sr1 <- readr::read_csv(file.path("..","mutation_effects_model","AncSR1_complete_data.csv.gz")) %>%
mutate(bg = "AncSR1")
data_sr2 <- readr::read_csv(file.path("..","mutation_effects_model","AncSR2_complete_data.csv.gz")) %>%
mutate(bg = "AncSR2")
meanF_data <- rbind(data_sr1,data_sr2)
# Add column of protein-DNA complexes
meanF_data <- meanF_data %>% mutate(RE_mod = case_when(RE == "ERE (GT)" ~ "GT",
RE == "SRE1 (AA)" ~ "AA",
RE == "SRE2 (GA)" ~ "GA",
TRUE ~ RE),
complex = paste(AA_var,RE_mod,sep=""))
# Reference wild-type ancestral genotypes:
AncSR1_ERE_ref <- meanF_data %>% filter(AA_var == "EGKA" & bg == "AncSR1" & RE == "ERE (GT)") %>% pull(avg_meanF)
AncSR2_SRE_ref <- meanF_data %>% filter(AA_var == "GSKV" & bg == "AncSR2" & RE == "SRE1 (AA)") %>% pull(avg_meanF)
# BUILD PHENOTYPE TABLE #
# For each *functional* complex (those with meanF >= AncSR2_SRE_ref):
phenotypes_tbl <- meanF_data %>% filter(avg_meanF >= AncSR2_SRE_ref) %>%
group_by(complex, bg) %>%
summarise(n_bound_REs = n(), # how many DNA elements can bind
meanF_bREs = avg_meanF, # the average meanF for the prot-DNA complex
specific = ifelse(n_bound_REs == 1, "YES","NO"), # functional binding to only one DNA element?
specificity = ifelse(n_bound_REs == 1, RE, "Promiscuous"), # Determine the type of specificity
bound_REs = list(RE)) # assign DNA elements bound
#phenotypes_tbl_complex <- phenotypes_tbl # save it for later
} else {
# load matrices if already created
load("./MutSel_matrices_complete_data_complexes.RData")
phenotypes_tbl_complex <- phenotypes_tbl # save it for later
}
# load functions
source("../../scripts/MC_MutSel_functions.R")
packages <- c("tidyr", "MASS", "ggplot2", "Matrix", "stringr", "tibble",
"dplyr", "patchwork", "foreach", "doParallel", "matrixStats",
"Biostrings", "readr","furrr","purrr","igraph","recommenderlab",
"Matrix","ggradar","pheatmap","XNomial")
installed_packages <- packages %in% rownames(installed.packages())
if(installed_packages[which(packages=="Biostrings")] == F){
BiocManager::install("Biostrings")
}
if(installed_packages[which(packages=="ggradar")] == F){
devtools::install_github("ricardo-bion/ggradar", dependencies = TRUE)
}
if(any(installed_packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))] == F)) {
to_install <- !installed_packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))]
pack <- packages[-c(which(packages=="ggradar"),which(packages=="Biostrings"))]
install.packages(pack[to_install])
}
# load packages
invisible(lapply(packages, library, character.only=TRUE))
phenotypic_transitions <- function(from=REs[[1]],to=REs[[1]],from_nodes=NULL,tr_mat,bg,n_steps,specific=F,normalize=T,complex=FALSE){
# from, to = vectors containing the names of the DNA phenotypes to compute the trajectory (default: all REs)
# from_nodes = alternative vector to 'from' which, instead of DNA phenotypes, includes the vector of starting genotypes.
# tr_mat = a probability transition matrix
# Bg = a string indicating the DBD background ("AncSR1" or "AncSR2")
# n_steps = number of (mutational) steps to run the Markov chain
# specific = logical argument to indicate whether to compute PDFV using specific genotypes (TRUE) or including promiscuous (FALSE) (default: FALSE).
# normalize = logical arg. to specify whether to re-normalize the probabilities (default: TRUE)
# complex = whether to use protein-DNA genotypes to compute transitions
# check inconsistent/valid arguments
if(!(bg %in% c("AncSR1","AncSR2")) || is.null(bg)){
stop("Specify DBD background: 'AncSR1' or 'AncSR2'")
}
if(!is.null(from_nodes) && !is.null(from)){
stop("Provide only one set of starting parameters; either a vector of phenotypes, or a vector of genotypes.")
}
if(is.null(from) && is.null(to)){
stop("Empty 'from' and 'to' arguments. Provide the vector of phenotypes to compute the transition probabilities.")
}
if(is.null(tr_mat)){
stop("Provide a probability transition matrix.")
}
if(is.null(n_steps) || n_steps==0){
stop("Provide a correct number of steps to run the markov chain (n_steps > 0)")
}
if(!is.null(from_nodes) & complex==FALSE){
# dimensions of matrix and names of columns/rows
# extract starting phenotypes from starting nodes
RE_from <- unique(phenotypes_tbl %>% filter(specific == "YES" & bg == bg) %>%
filter(AA_var %in% from_nodes) %>% pull(specificity))
n_rows <- length(RE_from)
n_cols <- length(to)
RE_to <- REs[[1]][REs[[1]] %in% to]
}
else if(!is.null(from_nodes) & complex==TRUE){
# dimensions of matrix and names of columns/rows
# extract starting phenotypes from starting nodes
RE_from <- unique(phenotypes_tbl %>% filter(bg == bg) %>%
filter(complex %in% from_nodes) %>% pull(specificity))
n_rows <- length(RE_from)
n_cols <- length(to)
RE_to <- REs[[1]][REs[[1]] %in% to]
}
else{
# dimensions of matrix and names of columns/rows
n_rows <- length(from)
RE_from <- REs[[1]][REs[[1]] %in% from]
n_cols <- length(to)
RE_to <- REs[[1]][REs[[1]] %in% to]
}
# order rows and columns
RE_from <- RE_from[order(match(RE_from,REs[[1]]))]
RE_to <- RE_to[order(match(RE_to,REs[[1]]))]
# create phenotypic transition matrix between all pairs of phenotypes
pheno_transition_mat <- matrix(NA,ncol = n_cols, nrow = n_rows)
rownames(pheno_transition_mat) <- RE_from
colnames(pheno_transition_mat) <- RE_to
states <- rownames(tr_mat) # states in the transition matrix
for(i in RE_from){
if(complex){
# extract amino acid variants from the ith neutral network
phenotype_vars <- phenotypes_tbl %>% filter(complex %in% states) %>%
filter(bg == bg & specificity == i) %>% pull(complex)
}
else{
# extract amino acid variants from the ith neutral network
phenotype_vars <- phenotypes_tbl %>% filter(AA_var %in% states) %>%
filter(bg == bg & specificity == i) %>% pull(AA_var)
}
# if specific genotypes are not part of the main network, or no specific genotypes, continue:
if(identical(phenotype_vars, character(0))) next
# run markov chain
mc_tmp <- simulate_markov_chain(phenotype_vars,tr_mat,n_steps = n_steps)
pdfv_tmp <- get_PDFV_v2(mc_tmp,Bg = bg ,specific = specific,type="simulated mc",complex=complex) %>% filter(RE %in% RE_to)
# re-normalize probabilities?
if(normalize){
pdfv_tmp <- pdfv_tmp %>% mutate(Norm_F_prob = Norm_F_prob /sum(Norm_F_prob))
}
# if excluding promiscuous, recalculate the probabilities of each transition
if(specific && normalize){
pdfv_tmp <- pdfv_tmp %>% filter(RE != "Promiscuous") %>% mutate(Norm_F_prob = Norm_F_prob /sum(Norm_F_prob))
}
# order REs
x <- pdfv_tmp$Norm_F_prob; names(x) <- pdfv_tmp$RE
x <- x[order(match(names(x),REs[[1]]))]
pheno_transition_mat[which(rownames(pheno_transition_mat)== i),] <- x
}
return(pheno_transition_mat)
}
# Phenotypic transitions only between specific genotypes --> change in specificity
pheno_transition_sr1_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH,specific = T,complex = T)
P_drift_sr1_ntwrk_complex <- extract_main_ntwrk(as.undirected(net_sr1_complex),M_drift_sr1)
P_drift_sr1_ntwrk_statdist_complex <- stationary_dist(P_drift_sr1_ntwrk_complex)
P_drift_sr2_ntwrk_complex <- extract_main_ntwrk(as.undirected(net_sr2_complex),M_drift_sr2)
P_drift_sr2_ntwrk_statdist_complex <- stationary_dist(P_drift_sr2_ntwrk_complex)
# Directional selection
P_dir_sr1_ntwrk_complex <- extract_main_ntwrk(as.undirected(net_sr1_complex),M_dir_sr1)
P_dir_sr1_ntwrk_statdist_complex <- stationary_dist(P_dir_sr1_ntwrk_complex)
P_dir_sr2_ntwrk_complex <- extract_main_ntwrk(as.undirected(net_sr2_complex),M_dir_sr2)
P_dir_sr2_ntwrk_statdist_complex <- stationary_dist(P_dir_sr2_ntwrk_complex)
# Phenotypic transitions only between specific genotypes --> change in specificity
pheno_transition_sr1_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH,specific = T,complex = T)
PATH_LENGTH = 3 # path length (neighborhood size) to find mutational trajectoties
REF_GENOTYPE = "EGKA" # EGKA (historical genotype)
REF_GENOTYPE_COMPLEX = "EGKAGT" #EGKA/GT (historical protein-DNA complex)
N_CORES=detectCores()-1 # number of cores for parallel processing
cols <- RColorBrewer::brewer.pal(8, name="Dark2")
# Phenotypic transitions only between specific genotypes --> change in specificity
pheno_transition_sr1_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH,specific = T,complex = T)
PATH_LENGTH_COMPLEX = 5 # path length (neighborhood size) to find mutational trajectoties in the prot-DNA network
pheno_transition_sr2_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr2_ntwrk_complex,
bg = "AncSR2",n_steps = PATH_LENGTH,specific = T,complex = T)
# optional: compute global transition probs --> from all specific genotype in main network to every specific genotype
# AncSR1 network
spec_nodes_sr1 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR1") %>% pull(complex)
spec_nodes_sr1
ntwrk_transition_sr1 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr1,tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH,specific = T,complex=T)
ntwrk_transition_sr1 <- apply(ntwrk_transition_sr1,2,sum,na.rm=T)
ntwrk_transition_sr1 <- as.matrix(t(ntwrk_transition_sr1/sum(ntwrk_transition_sr1))); rownames(ntwrk_transition_sr1) <- "Network"
pheno_transition_sr1_complex <- rbind(ntwrk_transition_sr1,pheno_transition_sr1_spec)
pheno_transition_sr1_complex <- rbind(ntwrk_transition_sr1,pheno_transition_sr1_complex)
# AncSR2 network
spec_nodes_sr2 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR2") %>% pull(complex)
ntwrk_transition_sr2 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr2,tr_mat=P_drift_sr2_ntwrk_complex,
bg = "AncSR2",n_steps = PATH_LENGTH,specific = T,complex=T)
ntwrk_transition_sr2 <- apply(ntwrk_transition_sr2,2,sum,na.rm=T)
ntwrk_transition_sr2 <- as.matrix(t(ntwrk_transition_sr2/sum(ntwrk_transition_sr2))); rownames(ntwrk_transition_sr2) <- "Network"
pheno_transition_sr2_complex <- rbind(ntwrk_transition_sr2,pheno_transition_sr2_complex)
# scaled probabilities
pheno_transition_sr1_complex_scaled <- t(apply(pheno_transition_sr1_complex,1,scale)); colnames(pheno_transition_sr1_complex_scaled) <- REs[[1]]
pheno_transition_sr2_complex_scaled <- t(apply(pheno_transition_sr2_complex,1,scale)); colnames(pheno_transition_sr2_complex_scaled) <- REs[[1]]
breaksList <- seq(-1,4,0.1)
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_xomplex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheno_transition_sr1_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH_COMPLEX,specific = T,complex = T)
pheno_transition_sr2_complex <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr2_ntwrk_complex,
bg = "AncSR2",n_steps = PATH_LENGTH_COMPLEX,specific = T,complex = T)
# optional: compute global transition probs --> from all specific genotype in main network to every specific genotype
# AncSR1 network
spec_nodes_sr1 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR1") %>% pull(complex)
ntwrk_transition_sr1 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr1,tr_mat=P_drift_sr1_ntwrk_complex,
bg = "AncSR1",n_steps = PATH_LENGTH_COMPLEX,specific = T,complex=T)
ntwrk_transition_sr1 <- apply(ntwrk_transition_sr1,2,sum,na.rm=T)
ntwrk_transition_sr1 <- as.matrix(t(ntwrk_transition_sr1/sum(ntwrk_transition_sr1))); rownames(ntwrk_transition_sr1) <- "Network"
pheno_transition_sr1_complex <- rbind(ntwrk_transition_sr1,pheno_transition_sr1_complex)
# AncSR2 network
spec_nodes_sr2 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR2") %>% pull(complex)
ntwrk_transition_sr2 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr2,tr_mat=P_drift_sr2_ntwrk_complex,
bg = "AncSR2",n_steps = PATH_LENGTH_COMPLEX,specific = T,complex=T)
ntwrk_transition_sr2 <- apply(ntwrk_transition_sr2,2,sum,na.rm=T)
ntwrk_transition_sr2 <- as.matrix(t(ntwrk_transition_sr2/sum(ntwrk_transition_sr2))); rownames(ntwrk_transition_sr2) <- "Network"
pheno_transition_sr2_complex <- rbind(ntwrk_transition_sr2,pheno_transition_sr2_complex)
# plot
#breaksList <- seq(0,1,0.1)
#pheatmap(pheno_transition_sr1_spec,cluster_rows = F,cluster_cols = F,na_col = "black",
#         border_color = "black",
#         color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
#         breaks = breaksList, legend_labels = seq(0,1,0.2))
#
#pheatmap(pheno_transition_sr2_spec,cluster_rows = F,cluster_cols = F,na_col = "black",
#         border_color = "black",
#         color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
#         breaks = breaksList, legend_labels = seq(0,1,0.2))
# scaled probabilities
pheno_transition_sr1_complex_scaled <- t(apply(pheno_transition_sr1_complex,1,scale)); colnames(pheno_transition_sr1_complex_scaled) <- REs[[1]]
pheno_transition_sr2_complex_scaled <- t(apply(pheno_transition_sr2_complex,1,scale)); colnames(pheno_transition_sr2_complex_scaled) <- REs[[1]]
breaksList <- seq(-1,4,0.1)
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
# Check whether the matrices have been created already
if(!file.exists(file.path(".", "MutSel_matrices_complete_data.RData"))) {
# Load complete data from mutation effects model
data_sr1 <- readr::read_csv(file.path("..","mutation_effects_model","AncSR1_complete_data.csv.gz")) %>%
mutate(bg = "AncSR1")
data_sr2 <- readr::read_csv(file.path("..","mutation_effects_model","AncSR2_complete_data.csv.gz")) %>%
mutate(bg = "AncSR2")
meanF_data <- rbind(data_sr1,data_sr2)
# Reference wild-type ancestral genotypes:
AncSR1_ERE_ref <- meanF_data %>% filter(AA_var == "EGKA" & bg == "AncSR1" & RE == "ERE (GT)") %>% pull(avg_meanF)
AncSR2_SRE_ref <- meanF_data %>% filter(AA_var == "GSKV" & bg == "AncSR2" & RE == "SRE1 (AA)") %>% pull(avg_meanF)
# BUILD PHENOTYPE TABLE #
# For each *functional* variant (those with meanF >= AncSR2_SRE_ref):
phenotypes_tbl <- meanF_data %>% filter(avg_meanF >= AncSR2_SRE_ref) %>%
group_by(AA_var, bg) %>%
summarise(n_bound_REs = n(), # how many DNA elements can bind
meanF_bREs = mean(avg_meanF), # the average meanF across all DNA elements bound
max_meanF_bREs = max(avg_meanF), # the max meanF across all DNA elements bound
min_meanF_bREs = min(avg_meanF), # the min meanF across all DNA elements bound
specific = ifelse(n_bound_REs == 1, "YES","NO"), # functional binding to only one DNA element?
specificity = ifelse(n_bound_REs == 1, RE, "Promiscuous"), # Determine the type of specificity
bound_REs = list(RE)) # assign DNA elements bound
#phenotypes_tbl_prot <- phenotypes_tbl # save it for later
} else {
# load matrices if already created
load("./MutSel_matrices_complete_data.RData")
phenotypes_tbl_prot <- phenotypes_tbl # save it for later
}
P_drift_sr1_ntwrk <- extract_main_ntwrk(net_sr1,M_drift_sr1) # create square matrix of main component of genotype network
P_drift_sr1_ntwrk_statdist <- stationary_dist(P_drift_sr1_ntwrk) # compute stationary distribution of genotypes in the main network component
P_drift_sr2_ntwrk <- extract_main_ntwrk(net_sr2,M_drift_sr2)
P_drift_sr2_ntwrk_statdist <- stationary_dist(P_drift_sr2_ntwrk)
pheno_transition_sr1_spec <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr1_ntwrk,bg = "AncSR1",n_steps = PATH_LENGTH,specific = T)
pheno_transition_sr2_spec <- phenotypic_transitions(from=REs[[1]],to=REs[[1]],tr_mat=P_drift_sr2_ntwrk,bg = "AncSR2",n_steps = PATH_LENGTH,specific = T)
# optional: compute global transition probs --> from all specific genotype in main network to every specific genotype
# AncSR1 network
spec_nodes_sr1 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR1") %>% pull(AA_var)
ntwrk_transition_sr1 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr1,tr_mat=P_drift_sr1_ntwrk,
bg = "AncSR1",n_steps = PATH_LENGTH,specific = T)
ntwrk_transition_sr1 <- apply(ntwrk_transition_sr1,2,sum,na.rm=T)
ntwrk_transition_sr1 <- as.matrix(t(ntwrk_transition_sr1/sum(ntwrk_transition_sr1))); rownames(ntwrk_transition_sr1) <- "Network"
pheno_transition_sr1_spec <- rbind(ntwrk_transition_sr1,pheno_transition_sr1_spec)
# AncSR2 network
spec_nodes_sr2 <- phenotypes_tbl %>% filter(specific=="YES" & bg=="AncSR2") %>% pull(AA_var)
ntwrk_transition_sr2 <- phenotypic_transitions(from=NULL,from_nodes = spec_nodes_sr2,tr_mat=P_drift_sr2_ntwrk,
bg = "AncSR2",n_steps = PATH_LENGTH,specific = T)
ntwrk_transition_sr2 <- apply(ntwrk_transition_sr2,2,sum,na.rm=T)
ntwrk_transition_sr2 <- as.matrix(t(ntwrk_transition_sr2/sum(ntwrk_transition_sr2))); rownames(ntwrk_transition_sr2) <- "Network"
pheno_transition_sr2_spec <- rbind(ntwrk_transition_sr2,pheno_transition_sr2_spec)
pheno_transition_sr1_spec_scaled <- t(apply(pheno_transition_sr1_spec,1,scale)); colnames(pheno_transition_sr1_spec_scaled) <- REs[[1]]
pheno_transition_sr2_spec_scaled <- t(apply(pheno_transition_sr2_spec,1,scale)); colnames(pheno_transition_sr2_spec_scaled) <- REs[[1]]
breaksList <- seq(-1,4,0.1)
pheatmap(pheno_transition_sr1_spec_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_spec_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
phenotypes_tbl_complex %>% filter(complex %in% rownames(P_drift_sr1_ntwrk_complex)) %>%
filter(bg == "AncSR1" & specificity == "SRE2 (GA)") %>% pull(complex)
source("../../scripts/MC_MutSel_functions.R")
pheatmap(pheno_transition_sr2_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr2_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheatmap(pheno_transition_sr1_complex_scaled,cluster_rows = F,cluster_cols = F,na_col = "black",
border_color = "black",
color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList, legend_labels = seq(-1,4,0.2))
pheno_transition_sr1_spec_scaled
apply(pheno_transition_sr1_spec_scaled,2,sum,na.rm=T)
apply(abs(pheno_transition_sr1_spec_scaled),2,sum,na.rm=T)
total_prob_phenotype_sr1_complex <- apply(abs(pheno_transition_sr1_complex_scaled),2,sum,na.rm=T)
total_prob_phenotype_sr1_complex
pheno_transition_sr1_spec_scaled
pheno_transition_sr1_spec_scaled[-1,]
pheno_transition_sr1_spec_scaled[-1,] %>% apply(abs(.),2,sum,na.rm=T)
apply(abs(pheno_transition_sr1_spec_scaled[-1,]),2,sum,na.rm=T)
df_total_pheno_prob_sr1 <- inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein"),
by="RE")
total_prob_phenotype_sr1 <- apply(abs(pheno_transition_sr1_spec_scaled[-1,]),2,sum,na.rm=T) # remove whole network prob.
total_prob_phenotype_sr1_complex <- apply(abs(pheno_transition_sr1_complex_scaled[-1,]),2,sum,na.rm=T)
df_total_pheno_prob_sr1 <- inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein"),
by="RE")
df_total_pheno_prob_sr1
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE") %>%
pivot_longer(cols = c(2,4),names_to ="type",values_to = "prob")
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE") %>%
pivot_longer(cols = c(3,5),names_to ="type",values_to = "prob")
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE") %>%
pivot_longer(cols = c(3,5),values_to = "type")
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE") %>%
pivot_longer(cols = c(3,5),values_to = "type") %>% pivot_longer(cols = c(1,3),values_to = "prob")
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE") %>%
pivot_longer(cols = c(3,5),values_to = "type") %>% pivot_longer(cols = c(2,3),values_to = "prob")
inner_join(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"),
by="RE")
rbind(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"))
ggplot(df_total_pheno_prob_sr1,aes(x=RE,y=prob,group=type,fill=type)) + geom_bar(col = "black")
df_total_pheno_prob_sr1
df_total_pheno_prob_sr1 <- rbind(data.frame(RE=names(total_prob_phenotype_sr1),prob=total_prob_phenotype_sr1,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr1_complex),prob=total_prob_phenotype_sr1_complex,type="protein-DNA"))
df_total_pheno_prob_sr2 <- rbind(data.frame(RE=names(total_prob_phenotype_sr2),prob=total_prob_phenotype_sr2,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr2_complex),prob=total_prob_phenotype_sr2_complex,type="protein-DNA"))
total_prob_phenotype_sr2 <- apply(abs(pheno_transition_sr2_spec_scaled[-1,]),2,sum,na.rm=T)
total_prob_phenotype_sr2_complex <- apply(abs(pheno_transition_sr2_complex_scaled[-1,]),2,sum,na.rm=T)
df_total_pheno_prob_sr2 <- rbind(data.frame(RE=names(total_prob_phenotype_sr2),prob=total_prob_phenotype_sr2,type="protein"),
data.frame(RE=names(total_prob_phenotype_sr2_complex),prob=total_prob_phenotype_sr2_complex,type="protein-DNA"))
ggplot(df_total_pheno_prob_sr1,aes(x=RE,y=prob,group=type,fill=type)) + geom_bar(col = "black")
ggplot(df_total_pheno_prob_sr1,aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"),
legend.position = "none")
ggplot(df_total_pheno_prob_sr1,aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold")) +
geom_text(aes(x=specific,label=count,y=count),vjust=1.1,color="white")
ggplot(df_total_pheno_prob_sr1,aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
# plot
p1 <- df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
p2 <- df_total_pheno_prob_sr2 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
p1 + p2
# plot
p1 <- df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"),
legend.position = "none")
p2 <- df_total_pheno_prob_sr2 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
p1 + p2
df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
scale_fill_manual(values = c("gray40","black")) +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"),
legend.position = "none")
df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
scale_fill_manual(values = c("gray30","black")) +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"),
legend.position = "none")
# plot
p1 <- df_total_pheno_prob_sr1 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
scale_fill_manual(values = c("gray60","black")) +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"),
legend.position = "none")
p2 <- df_total_pheno_prob_sr2 %>% mutate(RE = factor(RE,levels =REs[[1]])) %>%
ggplot(aes(x=RE,y=prob,fill=type)) +
geom_bar(stat="identity",color="black",position = "dodge") +
scale_fill_manual(values = c("gray60","black")) +
theme_classic() +
labs(x="DNA element",y="Relative total transition probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1,size = 10),
axis.text.y = element_text(size = 13),
axis.title=element_text(size=13,face="bold"))
p1 + p2
getwd()
getwd()
"factorextra" %in% installed.packages()
"factoextra" %in% installed.packages()
getwd()
getwd()
library(ggplot2)
getwd()
getwd()
